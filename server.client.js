let Set = {
    WebSocket : {
    domain: null,
    _events: { close: [Function] },
    _eventsCount: 1,
    _maxListeners: undefined,
    readyState: 1,
    bytesReceived: 0,
    extensions: {},
    protocol: '',
    _binaryType: 'nodebuffer',
    _finalize: { [Function: bound finalize] __ultron: 1 },
    _closeFrameReceived: false,
    _closeFrameSent: false,
    _closeMessage: '',
    _closeTimer: null,
    _finalized: false,
    _closeCode: 1006,
    _receiver:{
        Receiver : {
            _binaryType: 'nodebuffer',
            _extensions: {},
            _maxPayload: 104857600,
            _bufferedBytes: 0,
            _buffers: [],
            _compressed: false,
            _payloadLength: 0,
            _fragmented: 0,
            _masked: false,
            _fin: false,
            _mask: null,
            _opcode: 0,
            _totalPayloadLength: 0,
            _messageLength: 0,
            _fragments: [],
            _cleanupCallback: null,
            _hadError: false,
            _dead: false,
            _loop: false,
            onmessage: [Function],
            onclose: [Function],
            onerror: [Function],
            onping: [Function],
            onpong: [Function],
            _state: 0 }
    }
    ,
    _sender:{
        Sender {
            _extensions: {},
            _socket: [Object],
            _firstFragment: true,
            _compress: false,
            _bufferedBytes: 0,
            _deflating: false,
            _queue: [] }
    }
     ,
    _socket:{
        Socket {
            connecting: false,
            _hadError: false,
            _handle: [Object],
            _parent: null,
            _host: null,
            _readableState: [Object],
            readable: true,
            domain: null,
            _events: [Object],
            _eventsCount: 8,
            _maxListeners: undefined,
            _writableState: [Object],
            writable: true,
            allowHalfOpen: true,
            destroyed: false,
            _bytesDispatched: 129,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: [Object],
            _server: [Object],
            _idleTimeout: -1,
            _idleNext: null,
            _idlePrev: null,
            _idleStart: 11742,
            parser: null,
            on: [Function],
            _paused: false,
            read: [Function],
            _consuming: true },
         _ultron: Ultron { id: 1, ee: [Object] },
         protocolVersion: 13,
         _maxPayload: 104857600,
         _isServer: true }
    }
      };
  